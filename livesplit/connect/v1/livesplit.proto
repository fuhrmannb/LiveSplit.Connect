syntax = "proto3";

package livesplit.connect.v1;
option csharp_namespace = "LiveSplit.Connect";

import "google/protobuf/duration.proto";

// ComparisonMethod represents the current comparaison method setup in LiveSplit.
enum ComparisonMethod {
  // Comparaison no specified, probably an issue with the request or LiveSplit.
  COMPARISON_METHOD_UNSPECIFIED = 0;
  // Compare again personal best (PB)
  COMPARISON_METHOD_PERSONAL_BEST = 1;
  // Compare again best segments
  COMPARISON_METHOD_BEST_SEGMENT = 2;
  // Compare again best split times
  COMPARISON_METHOD_BEST_SPLIT_TIMES = 3;
  // Compare again average segments
  COMPARISON_METHOD_AVERAGE_SEGMENTS = 4;
  // Compare again balanced PB
  COMPARISON_METHOD_BALANCED_PB = 5;
}

// TimerPhase represent the state of the timer in Livesplit.
enum TimerPhase {
  // Phase not specified, probably an issue with the request or LiveSplit.
  TIMER_PHASE_UNSPECIFIED = 0;
  // Timer is not running.
  TIMER_PHASE_NOT_RUNNING = 1;
  // Timer is running.
  TIMER_PHASE_RUNNING = 2;
  // Timer is paused
  TIMER_PHASE_PAUSED = 3;
  // Timer has ended (end of the run).
  TIMER_PHASE_ENDED = 4;
}

// TimingMethod is the current selected timing method in LiveSplit.
enum TimingMethod {
  // Method not specified, probably an issue with the request or LiveSplit.
  TIMING_METHOD_UNSPECIFIED = 0;
  // Real time method is currently used.
  TIMING_METHOD_REAL_TIME = 1;
  // Game time method is currently used.
  TIMING_METHOD_GAME_TIME = 2;
}

// Time represents the time inside LiveSplit.
message Time {
  // The real time.
  google.protobuf.Duration real_time = 1;
  // The game time.
  google.protobuf.Duration game_time = 2;
}

// Segment represents a portion of the run.
// A run contains multiple segments.
message Segment {
  // The name of the segment.
  string name = 1;
  // The current split time of the segment.
  Time split_time = 2;
  // The best split time of all runs from the beginning on the run to this segment.
  Time personal_best_split_time = 3;
  // The best segment time (starting from previous segment split) of all runs.
  Time best_segment_time = 4;
  // The position of the segment in the segment list of the run.
  uint32 index = 5;
}

// SplitAction represents a split action that can be done on the LiveSplit timer.
enum SplitAction {
  // Unspecified action, probably an issue with the request or LiveSplit.
  SPLIT_ACTION_UNSPECIFIED = 0;
  // Perform a split on current segment.
  SPLIT_ACTION_SPLIT = 1;
  // Skip the current split and move to the next segment.
  SPLIT_ACTION_SKIP = 2;
  // Undo the previous split and move to the previous segment.
  SPLIT_ACTION_UNDO = 3;
}

// Run represents a speedrun in LiveSplit: the game and the associated timer/segments.
message Run {
  // The name of the game.
  string game_name = 1;
  // The category of the speedrun.
  string run_category = 2;
  // The number of attempts (ie start of a run) done on this run.
  uint32 attempt_count = 3;
  // If revelant, the region of the game (mainly used for old game on retro hardware).
  string region = 4;
  // The platform where the game runs (PC, console...).
  string platform = 5;
  // If true, the game is emulated on a virtual hardware (emulator).
  bool uses_emulator = 6;
}

// LiveSplitService allows user to interact remotly with LiveSplit.
service LiveSplitService {
  // StartOrSplit starts the timer if not start, or split current segment is the timer is started.
  // If the timer is paused, nothing happens.
  rpc StartOrSplit(StartOrSplitRequest) returns (StartOrSplitResponse);

  // SkipSplit skip current split and move timer to the next segment.
  // If the timer is not started, this command does nothing.
  rpc SkipSplit(SkipSplitRequest) returns (SkipSplitResponse);

  // UnSplit undoes current split and move timer to the previous segment.
  // If the timer is not started, this command does nothing.
  rpc UnSplit(UnSplitRequest) returns (UnSplitResponse);

  // Pause toogles pause on the timer (pause if started, unpause if paused).
  // If the timer is not started, this command does nothing.
  rpc Pause(PauseRequest) returns (PauseResponse);

  // Reset the timer and all current segment splits.
  rpc Reset(ResetRequest) returns (ResetResponse);

  // GetTime returns the current time information of the timer.
  rpc GetTime(GetTimeRequest) returns (GetTimeResponse);

  // GetCurrentSegment returns the current segment info.
  rpc GetCurrentSegment(GetCurrentSegmentRequest) returns (GetCurrentSegmentResponse);

  // FindSegment searchs for a specific segment in the segment list of the run.
  rpc FindSegment(FindSegmentRequest) returns (FindSegmentResponse);

  // ListSegment returns all segment info of the run.
  rpc ListSegment(ListSegmentRequest) returns (ListSegmentResponse);

  // GetRun returns all information of the run.
  rpc GetRun(GetRunRequest) returns (GetRunResponse);

  // GetCurrentComparisonMethod returns the current select comparaison method in LiveSplit.
  rpc GetCurrentComparisonMethod(GetCurrentComparisonMethodRequest) returns (GetCurrentComparisonMethodResponse);

  // GetCurrentTimerPhase returns the current timer phase in LiveSplit
  rpc GetCurrentTimerPhase(GetCurrentTimerPhaseRequest) returns (GetCurrentTimerPhaseResponse);

  // GetCurrentTimingMethod returns the current selected timing method in LiveSplit.
  rpc GetCurrentTimingMethod(GetCurrentTimingMethodRequest) returns (GetCurrentTimingMethodResponse);

  // WatchTime streams regularly current run time to the client.
  // The frequency of updates is specified in the request.
  rpc WatchTime(WatchTimeRequest) returns (stream WatchTimeResponse);

  // WatchTimerPhase streams change events regarding timer phase to the client.
  rpc WatchTimerPhase(WatchTimerPhaseRequest) returns (stream WatchTimerPhaseResponse);

  // WatchSplit streams change events regarding timer phase to the client.
  rpc WatchSplit(WatchSplitRequest) returns (stream WatchSplitResponse);

  // WatchRun streams change events regarding selected run (ie when another run file is loaded) to the client.
  rpc WatchRun(WatchRunRequest) returns (stream WatchRunResponse);
}

// StartOrSplitRequest is the request message for StartOrSplit method.
message StartOrSplitRequest {}
// StartOrSplitResponse is the response message for StartOrSplit method.
message StartOrSplitResponse {}

// SkipSplitRequest is the request message for SkipSplit method.
message SkipSplitRequest {}
// SkipSplitResponse is the response message for SkipSplit method.
message SkipSplitResponse {}

// UnSplitRequest is the request message for UnSplit method.
message UnSplitRequest {}
// UnSplitResponse is the response message for UnSplit method.
message UnSplitResponse {}

// PauseRequest is the request message for Pause method.
message PauseRequest {}
// PauseResponse is the response message for Pause method.
message PauseResponse {}

// ResetRequest is the request message for Reset method.
message ResetRequest {}
// ResetResponse is the response message for Reset method.
message ResetResponse {}

// GetTimeRequest is the request message for GetTime method.
message GetTimeRequest {}
// GetTimeResponse is the response message for GetTime method.
message GetTimeResponse {
  // The current time of the run in LiveSplit.
  Time time = 1;
}

// GetCurrentSegmentRequest is the request message for GetCurrentSegment method.
message GetCurrentSegmentRequest {}
// GetCurrentSegmentResponse is the response message for GetCurrentSegment method.
message GetCurrentSegmentResponse {
  // The current segment of the run in LiveSplit.
  Segment segment = 1;
}

// FindSegmentRequest is the request message for FindSegment method.
message FindSegmentRequest {
  // The exact name of the segment to find.
  string segment_name = 1;
}
// FindSegmentResponse is the response message for FindSegment method.
message FindSegmentResponse {
  // The searched segment. `null` if not segment is associated with previous name.
  Segment segment = 1;
}

// ListSegmentRequest is the request message for ListSegment method.
message ListSegmentRequest {}
// ListSegmentResponse is the response message for ListSegment method.
message ListSegmentResponse {
  // The complete list of segment in the run.
  repeated Segment segments = 1;
}

// GetRunRequest is the request message for GetRun method.
message GetRunRequest {}
// GetRunResponse is the response message for GetRun method.
message GetRunResponse {
  // The info of the current speedrun in LiveSplit.
  Run run = 1;
}

// GetCurrentComparisonMethodRequest is the request message for GetCurrentComparisonMethod method.
message GetCurrentComparisonMethodRequest {}
// GetCurrentComparisonMethodResponse is the response message for GetCurrentComparisonMethod method.
message GetCurrentComparisonMethodResponse {
  // The current selected comparaison method.
  ComparisonMethod method = 1;
}

// GetCurrentTimerPhaseRequest is the request message for GetCurrentTimerPhase method.
message GetCurrentTimerPhaseRequest {}
// GetCurrentTimerPhaseResponse is the response message for GetCurrentTimerPhase method.
message GetCurrentTimerPhaseResponse {
  // The current timer phase in LiveSplit
  TimerPhase phase = 1;
}

// GetCurrentTimingMethodRequest is the request message for GetCurrentTimingMethod method.
message GetCurrentTimingMethodRequest {}
// GetCurrentTimingMethodResponse is the response message for GetCurrentTimingMethod method.
message GetCurrentTimingMethodResponse {
  // The current selected timing method.
  TimingMethod method = 1;
}

// WatchTimeRequest is the request message for WatchTime method.
message WatchTimeRequest {
  // Specify how often server streams the current time in LiveSplit to the client.
  google.protobuf.Duration refresh_rate = 1;
}
// WatchTimeResponse is the response message for WatchTime method.
message WatchTimeResponse {
  // The current time of the run in LiveSplit.
  Time current_time = 1;
}

// WatchTimerPhaseRequest is the request message for WatchTimerPhase method.
message WatchTimerPhaseRequest {}
// WatchTimerPhaseResponse is the response message for WatchTimerPhase method.
message WatchTimerPhaseResponse {
  // The updated timer phase after a change event inside LiveSplit.
  TimerPhase phase = 1;
}

// WatchSplitRequest is the request message for WatchSplit method.
message WatchSplitRequest {}
// WatchSplitResponse is the response message for WatchSplit method.
message WatchSplitResponse {
  // The segment that has just been actionated in the run.
  Segment segment = 1;
  // The action associated with the split.
  SplitAction action = 2;
}

// WatchRunRequest is the request message for WatchRun method.
message WatchRunRequest{}
// WatchRunResponse is the response message for WatchRun method.
message WatchRunResponse{
  // The new information of the run, triggered after for instance a new run file load.
  Run run = 1;
}
